"""
Django settings for blog_project project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #Dnago REST Framework 
    #umożliwia tworzenie interfejsów API RESTful: sposób na przesyłanie informacji między interfejsem a bazą danych w prosty sposób.
    #Oddziela interfejs użytkownika i przechowywanie danych oraz komunikuje użytkownika i bazę danych, wysyłając plik .json
    #Korzystając z DRF, można utworzyć interfejs API, który będzie dostarczał informacje do interfejsu użytkownika.
    #Można utworzyć FrontEnd za pomocą Vue, aplikacji na Androida i iOS, a wszystkie trzy różne platformy są połączone z tym samym API
    'rest_framework',

    #Swagger pozwala opisać strukturę API, aby maszyny mogły je odczytać 
    #czytając strukturę API, możemy automatycznie stworzyć piękną i interaktywną dokumentację API
    #Możemy również automatycznie generować biblioteki klienckie dla  API w wielu językach i badać
    #inne możliwości, takie jak testy automatyczne
    #Swagger robi to, prosząc API o zwrócenie YAML lub JSON, które zawierają szczegółowy opis całego 
    #interfejsu API. Ten plik jest zasadniczo listą zasobów interfejsu API, który jest zgodny ze specyfikacją OpenAPI
    #Specyfikacja prosi o podanie informacji takich jak:
    #Jakie są wszystkie operacje, które obsługuje interfejs API?
    #Jakie są parametry interfejsu API i co zwraca?
    #Czy API wymaga autoryzacji?
    'drf_yasg',

    #umożliwia wyszukiwanie w REST Framework
    'django_filters',

    # Moja aplikacja z Postami
    'posts.apps.PostsConfig',

    #Moja aplikacja z płytami
    'cds.apps.CdsConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

#Djnago REST Framework - ZEZWOLENIA
#Określają one, czy żądanie powinno zostać udzielone, czy też nie
#Kontrola Zezwoleń jest zawsze uruchamiana na samym początku widoku (view), zanim jakikolwiek inny kod będzie mógł kontynuować
#Kontrola używa zaznwyczaj informacji uwierzytelniających we właściwościach request.user i request.auth, aby określić, czy 
#przychodzące żądanie powinno być dozwolone
#Zezwolenia służą do udzielania lub odmawiania dostępu różnym klasom użytkowników do różnych części interfejsu API
#Zezwolenia w ramach REST są zawsze definiowane jako lista klas zezwoleń
#Przed uruchomieniem głównej części widoku sprawdzane jest każde zezwolenie na liście. Jeśli jakiekolwiek sprawdzenie 
#zezwoleń nie powiedzie się zostają zgłaszane wyjątki, a główna treść widoku nie zostanie uruchomiona
#jeśli sprawdzenie zakończy się niepowodzeniem, zostanie zwrócona odpowiedź „403 Forbidden” lub „401 Unauthorized”
REST_FRAMEWORK = {
    #Ustawienie domyślnej polityki globalnie
    'DEFAULT_PERMISSION_CLASSES': [
        #Nieograniczony dostęp niezależnie od tego, czy żądanie zostało uwierzytelnione, czy nie
        #każdy anonimowy nieautoryzowany użytkownik może uzyskać dostęp do naszego punktu końcowego
        #PostList, każdy ma też pełny dostęp do tworzenia, edytowania, aktualizowania i usuwania postów
        #NIE JEST TO DOBRE!!!!
        #'rest_framework.permissions.AllowAny',
        #By nie musieć do każdego widoku dodawać pozwolenia osobno, dodam tutaj jedno dla wszystkich
        #Tylko zalogowani użytkownicy będą mogli widzieć /api/v1
        #'rest_framework.permissions.IsAdminUser',
        ]
}
