"""
Django settings for blog_project project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #dodać trzeba po zainstalowaniu django-allauth
    'django.contrib.sites',

    #Dnago REST Framework 
    #umożliwia tworzenie interfejsów API RESTful: sposób na przesyłanie informacji między interfejsem a bazą danych w prosty sposób.
    #Oddziela interfejs użytkownika i przechowywanie danych oraz komunikuje użytkownika i bazę danych, wysyłając plik .json
    #Korzystając z DRF, można utworzyć interfejs API, który będzie dostarczał informacje do interfejsu użytkownika.
    #Można utworzyć FrontEnd za pomocą Vue, aplikacji na Androida i iOS, a wszystkie trzy różne platformy są połączone z tym samym API
    'rest_framework',

    #musimy dodać authtoken, by móc zaimplementować Token Authentication, która generuje tokeny na serwerze
    #jest ona dołączona do Django REST Framework, ale trzeba ją dodać do ustawień
    #Po dodaniu tej aplikacji, w panelu administratowa pojawia się sekcja Tokens
    #Nie mamy na razie żadnych tokenów, bo są one generowane dopiero po wywołaniu
    #interfejsu API dla użytkownika w celu zalogowania się!
    'rest_framework.authtoken',

    #zainstalowałam django-rest-auth, by utworzyć endpoints, by uzytkownicy mogli sie zalogowac i wylogowac
    'rest_auth',

    #trzeba dodać to wszystko po zainstalowaniu django-allauth
    #którego bede używać do umożliwienia rejestracji
    'allauth', 
    'allauth.account', 
    'allauth.socialaccount', 
    #punkty koncowe rejestracji uzytkownikow
    'rest_auth.registration', 

    #Swagger pozwala opisać strukturę API, aby maszyny mogły je odczytać 
    #czytając strukturę API, możemy automatycznie stworzyć piękną i interaktywną dokumentację API
    #Możemy również automatycznie generować biblioteki klienckie dla  API w wielu językach i badać
    #inne możliwości, takie jak testy automatyczne
    #Swagger robi to, prosząc API o zwrócenie YAML lub JSON, które zawierają szczegółowy opis całego 
    #interfejsu API. Ten plik jest zasadniczo listą zasobów interfejsu API, który jest zgodny ze specyfikacją OpenAPI
    #Specyfikacja prosi o podanie informacji takich jak:
    #Jakie są wszystkie operacje, które obsługuje interfejs API?
    #Jakie są parametry interfejsu API i co zwraca?
    #Czy API wymaga autoryzacji?
    'drf_yasg',

    #umożliwia wyszukiwanie w REST Framework
    'django_filters',

    # Moja aplikacja z Postami
    'posts.apps.PostsConfig',

    #Moja aplikacja z płytami
    'cds.apps.CdsConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

#Djnago REST Framework - ZEZWOLENIA
#Określają one, czy żądanie powinno zostać udzielone, czy też nie
#Kontrola Zezwoleń jest zawsze uruchamiana na samym początku widoku (view), zanim jakikolwiek inny kod będzie mógł kontynuować
#Kontrola używa zaznwyczaj informacji uwierzytelniających we właściwościach request.user i request.auth, aby określić, czy 
#przychodzące żądanie powinno być dozwolone
#Zezwolenia służą do udzielania lub odmawiania dostępu różnym klasom użytkowników do różnych części interfejsu API
#Zezwolenia w ramach REST są zawsze definiowane jako lista klas zezwoleń
#Przed uruchomieniem głównej części widoku sprawdzane jest każde zezwolenie na liście. Jeśli jakiekolwiek sprawdzenie 
#zezwoleń nie powiedzie się zostają zgłaszane wyjątki, a główna treść widoku nie zostanie uruchomiona
#jeśli sprawdzenie zakończy się niepowodzeniem, zostanie zwrócona odpowiedź „403 Forbidden” lub „401 Unauthorized”
REST_FRAMEWORK = {
    #Ustawienie domyślnej polityki globalnie
    'DEFAULT_PERMISSION_CLASSES': [
        #Nieograniczony dostęp niezależnie od tego, czy żądanie zostało uwierzytelnione, czy nie
        #każdy anonimowy nieautoryzowany użytkownik może uzyskać dostęp do naszego punktu końcowego
        #PostList, każdy ma też pełny dostęp do tworzenia, edytowania, aktualizowania i usuwania postów
        #NIE JEST TO DOBRE!!!!
        #'rest_framework.permissions.AllowAny',
        #By nie musieć do każdego widoku dodawać pozwolenia osobno, dodam tutaj jedno dla wszystkich
        #Tylko zalogowani użytkownicy będą mogli widzieć /api/v1
        #'rest_framework.permissions.IsAdminUser',
        ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #tradycyjne Django od dawna stosuje alternatywny schemat uwierzytelniania, który jest połączeniem sesji i plików cookie
        #na wysokim poziomie klient uwierzytelnia się za pomocą swoich poświadczeń (nazwa użytkownika/hasło), a następnie 
        #otrzymuje identyfikator sesji z serwera, który jest przechowywany jako plik cookie
        #ten identyfikator sesji jest następnie przekazywany w nagłówku każdego przyszłego żądania HTTP
        #po przekazaniu identyfikatora sesji serwer używa go do wyszukiwania obiektu sesji zawierającego wszystkie dostępne 
        #informacje dla danego użytkownika, w tym poświadczenia
        #podejście to jest "stanowe", ponieważ rekord musi być przechowywany i utrzymywany zarówno na serwerze (the session object),
        #jak i na kliencie (the session ID)
        #Podstawowy przepływ:
        #1. użytkownik wprowadza swoje dane logowania (zazwyczaj nazwa użytkownika/hasło)
        #2. serwer sprawdza poprawność poświadczeń i generuje obiekt sesji, który jest następnie zapisywany w bazie danych
        #3. serwer wysyła klientowi identyfikator sesji, który jest przechowywany jako plik cookie w przeglądarce
        #4. we wszystkich przyszłych żądaniach identyfikator sesji jest dołączany jako nagłówek HTTP i jeśli zostanie 
        #zweryfikowany przez bazę danych, żądanie jest kontynuowane
        #5. gdy użytkownik wyloguje się z aplikacji, identyfikator sesji jest niszczony zarówno przez klienta, jak i przez serwer
        #6. jeśli użytkownik zaloguje się później ponownie zostanie wygenerowany nowy identyfikator sesji i zapisany jako plik cookie na kliencie
        'rest_framework.authentication.SessionAuthentication',
        #najpopularniejszą formą uwierzytelniania HTTP jest uwierzytelnianie podstawowe czyli Basic
        #Gdy klient wysyła żądanie HTTP, jest zmuszony do wysłania zatwierdzonych danych uwierzytelniających przed udzieleniem dostępu
        #przepływ żądania/odpowiedzi wygląda tak:
        #1. klient wysyla żądanie HTTP
        #2. serwer odpowiada, wysyłająć odpowiedz HTTP zawierającą kod stanu 401 (nieautoryzowany) i WWW-Authenticate HTTP header z 
        #szczególami dotczącymi autoryzacji
        #3. klient odsyla poswiadczenia za posrednictwem naglowka Authorization HTTP
        #4. serwer sprawdza poświadczenia i odpowiada kodem statusu 200 OK lub 403 Forbidden
        #Po zatwierdzeniu klient wysyła wszystkie przyszłe żądania z poświadczeniami nagłówka HTTP autoryzacji
        #Jest to prosta metoda, jednak ma kilka wad!
        # - przy każdym żądaniu serwer musi wyszukać i zweryfikować nazwę użytkownika i hasło, co jest nieefektywne, lepiej byłoby
        # raz sprawdzić, a następnie przekazać jakiś token, który mówi, że ten użytkownik został zatwierdzony
        # - poświadczenia użytkownika są przekazywane w postaci zwykłego tekstu, niezaszyfrowanego, przez Internet, co jest bardzo ryzykowne ponieważ
        #każdy ruch internetowy, który nie jest zaszyfrowany, można łatwo przechwycić i ponownie wykorzystać. 
        #!!!!Dlatego uwierzytelnianie podstawowe powinno być używane tylko za pośrednictwem protokołu HTTPS, bezpiecznej wersji protokołu HTTP!!!
        #'rest_framework.authentication.BasicAuthentication'
        #DOMYŚLNE USTAWIENIE W DJANGO REST FRAMEWORK JEST POŁĄCZENIEM BASIC I SESSION AUTHENTICATION!
        #NAJPIERW ZDEFINIOWAŁAM BASIC I SESSION, KTORE SĄ DOMYŚLNE!!
        #DEFINIUJE SIĘ DWIE METODY NA RAZ PONIEWAŻ SŁUŻĄ ONE RÓŻNYM CELOM!!
        #SESSION SŁUŻĄ DO ZASILANIA INTERFEJSU API BROWSABLE ORAZ MOŻLIWOŚCI LOGOWANIA SIĘ I WYLOGOWYWANIA Z NIEGO
        #BASIC SŁUŻY DO PZEKAZYWANIA ID SESJI W NAGŁÓWKACH HTTP DLA SAMEGO INTERFEJSU API
        #------------------------------------------------------------------------------------------------------------------------------------
        #Używany jest tradycyjny system uwierzytelniania oparty na sesji w Django, a identyfikator sesji jest przekazywany w nagłówku HTTP 
        #przy każdym żądaniu za pośrednictwem uwierzytelniania podstawowego.
        #Zaletą tego podejścia jest to, że jest bezpieczniejsze, ponieważ poświadczenia użytkownika są wysyłane tylko raz, a nie w każdym 
        #cyklu żądania/odpowiedzi, jak w przypadku uwierzytelniania podstawowego (Basic).
        #Jest to również bardziej wydajne, ponieważ serwer nie musi za każdym razem weryfikować poświadczeń użytkownika, po prostu 
        #dopasowuje identyfikator sesji do obiektu sesji, co umożliwia szybkie wyszukiwanie
        #Jednak sposób ten ma KILKA WAD!!
        #Po pierwsze, identyfikator sesji jest ważny tylko w przeglądarce, w której dokonano logowania; nie będzie działać w wielu domenach
        #Jest to oczywisty problem, gdy interfejs API musi obsługiwać wiele interfejsów użytkownika, takich jak witryna internetowa i aplikacja mobilna
        #Po drugie, obiekt sesji musi być aktualizowany, co może stanowić wyzwanie w przypadku dużych witryn z wieloma serwerami
        #Po trzecie, plik cookie jest wysyłany dla każdego żądania, nawet takiego, które nie wymaga uwierzytelniania, co jest nieefektywne
        #GENERALNIE NIE ZALECA SIĘ UŻYWANIA SCHEMATU UWIERZYTELNIANIA OPARTEGO NA SESJI DLA INTERFEJSU API, KTÓRY MA WIELE FRONT-END'ÓW!!!!
        #---------------------------------------------------------------------------------------------------------------------------------------
        #Trzecim podejściem jest użycie uwierzytelniania tokenów (Token authentication)
        #jest to najpopularniejsze podejście w ostatnich latach ze względu na wzrost liczby aplikacji jednostronicowych
        #Uwierzytelnianie oparte na tokenach jest bezstanowe: po wysłaniu przez klienta początkowych danych użytkownika do serwera generowany jest 
        #unikalny token, który jest następnie przechowywany przez klienta jako plik cookie lub w pamięci lokalnej. Ten token jest następnie przekazywany
        # w nagłówku każdego przychodzącego żądania HTTP, a serwer używa go do weryfikacji uwierzytelnienia użytkownika, sam serwer nie prowadzi 
        #rejestru użytkownika, tylko tego, czy token jest ważny, czy nie
        #COOKIES V LOCALSTORAGE
        #Pliki cookie służą do odczytywania informacji po stronie serwera. Mają mniejszy rozmiar (4KB) i są automatycznie wysyłane z każdym żądaniem HTTP.
        #LocalStorage jest przeznaczony dla informacji po stronie klienta. Jest znacznie większy (5120 KB), a jego zawartość nie jest domyślnie wysyłana przy każdym żądaniu HTTP.
        #Tokeny przechowywane zarówno w plikach cookie, jak i localStorage są podatne na ataki XSS. Obecnie najlepszą praktyką jest przechowywanie 
        #tokenów w pliku cookie z flagami httpOnly i Secure cookie.
        #TOKEN AUTHENTICATION MA WIELE ZALET!!!
        #ponieważ tokeny są przechowywane na kliencie, skalowanie serwerów w celu utrzymania aktualnych obiektów sesji nie jest już problemem
        #tokeny mogą być współużytkowane przez wiele interfejsów: ten sam token może reprezentować użytkownika w witrynie i tego samego użytkownika w aplikacji mobilnej
        #!!! Ten sam identyfikator sesji nie może być współużytkowany przez różne interfejsy, co jest głównym ograniczeniem !!!
        #minusem jest to, że tokeny mogą rosnąć dość duże!!!
        #token zawiera wszystkie informacje o użytkowniku, a nie tylko identyfikator, jak w przypadku skonfigurowanego identyfikatora sesji/obiektu sesji
        #ponieważ token jest wysyłany przy każdym żądaniu, zarządzanie jego rozmiarem może stać się problemem z wydajnością!!!
        #wbudowane TokenAuthentication w Django Frameworks jest dość proste
        #nie obsługuje ustawiania tokenów do wygaśnięcia, co jest ulepszeniem bezpieczeństwa, które można dodać. 
        #generuje również tylko jeden token na użytkownika, więc użytkownik na stronie internetowej, a później aplikacja mobilna będzie używać tego samego tokena
        #informacje o użytkowniku są przechowywane lokalnie, może to powodować problemy z utrzymaniem i aktualizacją dwóch zestawów informacji o kliencie
        #!!!!!!!! najbezpieczniejszym rozwiązaniem dla większości internetowych interfejsów API jest użycie schematu uwierzytelniania opartego na tokenach !!!!!!!!
        'rest_framework.authentication.TokenAuthentication',
        #Zostawiam Session Authentication ponieważ nadal potrzebujemy go dla naszego interfejsu API z możliwością przeglądania, ale teraz użyjemy tokenów
        #do przekazywania poświadczeń uwierzytelniania tam i z powrótem w naszych nagłówkach HTTP
    ],
}

#potrzebne ponieważ domyślnie wiadomość e-mail zostanie wysłana po zarejestrowaniu nowego użytkownika z prośbą o potwierdzenie konta
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
#część wbudowanej struktury „witryn” Django, która jest sposobem na hostowanie wielu witryn internetowych z tego samego projektu Django
SITE_ID = 1
