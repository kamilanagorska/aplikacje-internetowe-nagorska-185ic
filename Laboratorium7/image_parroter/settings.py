"""
Django settings for image_parroter project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
from celery.schedules import crontab   

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #moja aplikacja
    'thumbnailer',
    #Widget tweaks
    #będzie używana do kontrolowania renderowania danych wejściowych
    #formularza, aby umożliwić użytkownikom przesyłanie plików
    'widget_tweaks',
    #do periodic tasks
    'django_celery_beat'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'image_parroter.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'image_parroter.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
#z niego może być obsługiwana zawartość
MEDIA_URL = '/media/'

#lokalizacja MEDIA_ROOT, w której mogą znajdowac się pliki obrazów
#i archiwa zip
MEDIA_ROOT = os.path.abspath(os.path.join(BASE_DIR, 'media'))
IMAGES_DIR = os.path.join(MEDIA_ROOT, 'images')

#jak nie istnieją MEDIA_ROOT lub IMAGES_DIR to ma zostac stworzone IMAGES_DIR
if not os.path.exists(MEDIA_ROOT) or not os.path.exists(IMAGES_DIR):
    #makedirs() sluzy do ekurencyjnego tworzenia katalogu. 
    #Oznacza to, że podczas tworzenia katalogu liści, jeśli brakuje
    #jakiegokolwiek katalogu na poziomie pośrednim, metoda os.makedirs()
    #utworzy je wszystkie
    os.makedirs(IMAGES_DIR)


#Ustawienia Celery
#adres URL Brokera, czyli nasz Redis, "kanał"
CELERY_BROKER_URL = 'redis://localhost:6379'
#Backend używany do przechowywania wyników zadań
#U nas jest to Redis
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
#Whitelist typów zawartości/serializerów do zezwolenia
#gdy odebrana zostanie wiadomośc o innym typie zostanie
#ona odrzucona z błędem
#domyślnie jest to json, w naszym przypadku jest to
#rzeczywisty typ zawartości MIME
#MIME to Multipurpose Internet Mail Extension
#internetowy standard, zakodowany format pliku używany przez
#programy pocztowe
CELERY_ACCEPT_CONTENT = ['application/json']
#format serializacji wyników = json
CELERY_RESULT_SERIALIZER = 'json'
#string identyfikujący domyślną metodę serializacji do użycia
#domyślnie jest to json
CELERY_TASK_SERIALIZER = 'json'

#Ustawienia potrzebne do tasków okresowych
#strefa czasowa
CELERY_TIMEZONE = 'Europe/Warsaw'
CELERY_BEAT_SCHEDULE = {
 'send-every-minute': {
       'task': 'thumbnailer.tasks.welcome',
       'schedule': crontab()
    }, 
    'send-everyday-at-specific-time': {
        'task': 'thumbnailer.tasks.everyday',
        'schedule': crontab(minute=30, hour=12)
    },
    'send-every-15-minutes':{
        'task': 'thumbnailer.tasks.withargs',
        'schedule': crontab(minute='*/15'),
        'args': (20,200,2),
    },
}